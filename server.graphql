schema
  # Specify server configuration: Start tailcall server at 0.0.0.0:8000 and enable GraphiQL playground
  @server(port: 8000, graphiql: true, queryValidation: true)
  # Specify a base url for all http requests

  #https://api-web-shridharb.dev.razorpay.in
  @upstream(baseURL: "https://api-web-shridharb.dev.razorpay.in") {
  query: Query
}

type Query {
  # Specify the http path for the users query
  users: [User] @http(path: "/users")

  organisationInformation(domainName: String!): OrganisationInformation!
    @http(
      baseURL: "https://dashboard-shridharb.dev.razorpay.in"
      path: "/org"
      query: [{ key: "domainName", value: "{{args.domainName}}" }]
    )
  #  @expr(
  #    body: {
  #      http: {
  #        baseURL: "https://dashboard-shridharb.dev.razorpay.in"
  #        path: "/org"
  #        headers: [
  #          {
  #            key: "Authorization"
  #            value: "Bearer  {{Buffer.from(`${username}:${password}`).toString('base64') "
  #          }
  #        ]
  #      }
  #    }
  #  )
}

type OrganisationInformation {
  id: ID!
  code: String!
  name: OrganisationName!
  email: OrganisationEmail!
  allowedEmailDomains: [String!]!
  logo: OrganisationLogo
  domain: String!
}

type OrganisationName {
  registered: String
  display: String
}

type OrganisationEmail {
  to: String!
  from: String!
}

type OrganisationLogo {
  login: String
  invoice: String
  header: String
}
#
# Create a user type with the fields returned by the users api
type User {
  id: Int!
  name: String!
  username: String!
  email: String!

  # Extend the user type with the posts field
  # Use the current user's id to construct the path
  posts: [Post] @http(path: "/users/{{value.id}}/posts")
}

# Create a post type with the fields returned by the posts api
type Post {
  id: Int!
  title: String!
  body: String!
}
